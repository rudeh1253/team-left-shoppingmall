package team.left.shoppingmall.global;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;

import javax.sql.DataSource;

public class JdbcSupport {
    private static final DataSource dataSource = DataSourceContainer.getDataSource();
    private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    private static final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    public static Map<String, Object> selectOne(String sql, Map<Integer, Object> params) {
        List<Map<String, Object>> result = query(sql, params);
        if (result.isEmpty()) {
            throw new NoSuchElementException("결과가 없습니다");
        }
        if (result.size() >= 2) {
            throw new IllegalArgumentException("결과 반환 결과가 2개 이상입니다.");
        }
        return result.get(0);
    }
    
    public static List<Map<String, Object>> selectList(String sql, Map<Integer, Object> params) {
        return query(sql, params);
    }
    
    public static int insertOne(String sql, Map<Integer, Object> params, String autogeneratedKeyColumn) {
        return update(sql, params, autogeneratedKeyColumn);
    }
    
    public static int insertOne(String sql, Map<Integer, Object> params) {
        return update(sql, params, null);
    }
    
    public static void update(String sql, Map<Integer, Object> params) {
        update(sql, params, null);
    }
    
    private static List<Map<String, Object>> query(String sql, Map<Integer, Object> params) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = dataSource.getConnection();
            stmt = generatePreparedStatement(conn, sql, params, Optional.empty());
            
            rs = stmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            
            List<Map<String, Object>> result = new ArrayList<>();
            
            while (rs.next()) {
                Map<String, Object> map = new HashMap<>();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    int colNum = i + 1;
                    String columnName = rsmd.getColumnName(colNum);
                    map.put(columnName.toLowerCase(), rs.getObject(colNum));
                }
                result.add(map);
            }
            return result;
        } catch (SQLException e) {
            throw new RuntimeException(e); // TODO
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    private static int update(String sql, Map<Integer, Object> params, String autogeneratedKeyColumn) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = dataSource.getConnection();
            stmt = generatePreparedStatement(conn, sql, params, Optional.ofNullable(autogeneratedKeyColumn));
            
            int rows = stmt.executeUpdate();
            
            if (rows < 1) {
                throw new NoSuchElementException("결과 값이 없습니다");
            }
            
            ResultSet generatedKeys = stmt.getGeneratedKeys();
            if (!generatedKeys.next()) {
                throw new NoSuchElementException("Key가 생성되지 않았습니다.");
            }
            
            return generatedKeys.getInt(1);
        } catch (SQLException e) {
            throw new RuntimeException(e); // TODO
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    private static PreparedStatement generatePreparedStatement(Connection conn, String sql, Map<Integer, Object> params, Optional<String> autogeneratedKeyColumn) throws SQLException {
        PreparedStatement stmt;
        if (autogeneratedKeyColumn.isPresent()) {
            stmt = conn.prepareStatement(sql, new String[] { autogeneratedKeyColumn.get() });
        } else {
            stmt = conn.prepareStatement(sql);
        }
        
        for (Map.Entry<Integer, Object> entry : params.entrySet()) {
            Integer colNum = entry.getKey();
            Object value = entry.getValue();
            if (value == null) {
                stmt.setObject(colNum, null);
                continue;
            }
            Class<?> valueType = entry.getValue().getClass();
            if (Integer.class.isAssignableFrom(valueType)) {
                stmt.setInt(colNum, (Integer) value);
            } else if (String.class.isAssignableFrom(valueType)) {
                stmt.setString(colNum, (String) value);
            } else if (Date.class.isAssignableFrom(valueType)) {
                stmt.setDate(colNum, java.sql.Date.valueOf(dateFormat.format(value)));
            } else if (LocalDate.class.isAssignableFrom(valueType)) {
                stmt.setDate(colNum, java.sql.Date.valueOf(((LocalDate) value).format(dateTimeFormatter)));
            } else if (LocalDateTime.class.isAssignableFrom(valueType)) {
                stmt.setDate(colNum, java.sql.Date.valueOf(((LocalDateTime) value).format(dateTimeFormatter)));
            } else if (Boolean.class.isAssignableFrom(valueType)) {
                stmt.setBoolean(colNum, (Boolean) value);
            } else {
                throw new UnsupportedDataTypeException("지원되지 않는 데이터 타입: " + valueType);
            }
        }
        
        return stmt;
    }
}
